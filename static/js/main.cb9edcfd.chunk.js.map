{"version":3,"sources":["components/Home.js","components/Status.js","components/Scoreboard.js","components/Header.js","components/Jumbotron.js","components/Footer.js","components/CardBox.js","components/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","className","Status","props","wrongImage","message","Scoreboard","score","topScore","Header","Jumbotron","src","alt","Footer","CardBox","children","Card","style","width","onClick","clickedCard","id","image","name","App","state","guessWho","clickedCards","handleClickedCard","includes","setState","sort","Math","random","console","log","this","map","character","key","clicked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qgDAUeA,MARf,WACI,OACI,yBAAKC,UAAU,sBACX,6C,MCMGC,MARf,SAAgBC,GACZ,OACI,yBAAKF,UAAU,sBACX,wBAAIA,UAAWE,EAAMC,WAAa,aAAe,gBAAiBD,EAAME,WCIrEC,MARf,SAAoBH,GAChB,OACI,yBAAKF,UAAU,sBACX,sCAAYE,EAAMI,MAAlB,iBAAuCJ,EAAMK,YCW1CC,G,MAVA,SAACN,GACZ,OACI,yBAAKF,UAAU,mDACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQG,WAAYD,EAAMC,WAAYC,QAASF,EAAME,UACrD,kBAAC,EAAD,CAAYE,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMK,c,MCG7CE,MAXf,WACI,OACI,yBAAKT,UAAU,yCACX,yBAAKA,UAAU,wCACX,yBAAKA,UAAU,YAAYU,IAAI,oEAAoEC,IAAI,aACvG,wBAAIX,UAAU,gBAAd,+E,MCODY,MAZf,WACI,OACI,yBAAKZ,UAAU,sCACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eAAf,wB,MCMDa,MAVf,SAAiBX,GACb,OACI,yBAAKF,UAAWE,EAAMC,WAAa,4CAA8C,uCAC7E,yBAAKH,UAAU,OACVE,EAAMY,Y,MCGRC,MARf,SAAcb,GACV,OACI,yBAAKF,UAAU,OAAOgB,MAAO,CAAEC,MAAO,UAClC,yBAAKjB,UAAU,QAAQkB,QAAS,kBAAMhB,EAAMiB,YAAYjB,EAAMkB,KAAKV,IAAKR,EAAMmB,MAAOV,IAAKT,EAAMoB,S,OCmF7FC,E,2MA7EbC,MAAQ,CACNC,WACAnB,MAAO,EACPC,SAAU,EACVH,QAAS,4BACTsB,aAAc,GACdvB,YAAY,G,EAGdwB,kBAAoB,SAACP,GAEf,EAAKI,MAAME,aAAaE,SAASR,GACnC,EAAKS,SAAS,CACZzB,QAAS,2BACTD,YAAY,EAEZG,MAAO,EACPoB,aAAc,MAGhB,EAAKG,SAAS,CACZ1B,YAAY,EAEZG,MAAO,EAAKkB,MAAMlB,OAAS,EAC3BF,QAAS,yBACTqB,SAAU,EAAKD,MAAMC,SAASK,KAAK,kBAAMC,KAAKC,SAAW,OAG3D,EAAKH,SAAS,CACZH,aAAa,GAAD,mBACP,EAAKF,MAAME,cADJ,CAEVN,OAKF,EAAKI,MAAMjB,SAAW,EAAKiB,MAAMlB,OACnC,EAAKuB,SAAS,CACZtB,SAAU,EAAKiB,MAAMlB,QAGzB2B,QAAQC,IAAI,EAAKV,MAAME,e,wEAIf,IAAD,OACP,OACE,yBAAK1B,UAAU,WACb,kBAAC,EAAD,CACEM,MAAO6B,KAAKX,MAAMlB,MAClBC,SAAU4B,KAAKX,MAAMjB,SACrBH,QAAS+B,KAAKX,MAAMpB,QACpBD,WAAYgC,KAAKX,MAAMrB,aAEzB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASA,WAAYgC,KAAKX,MAAMrB,YAC7BsB,EAASW,IAAI,SAAAC,GACZ,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAUjB,GACfC,MAAOgB,EAAUhB,MACjBC,KAAMe,EAAUf,KAChBF,GAAIiB,EAAUjB,GACdmB,QAASF,EAAUE,QACnBpB,YAAa,EAAKQ,uBAK1B,kBAAC,EAAD,W,GAvEUa,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb9edcfd.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4>Clicky Game</h4>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './Status.css'\n\nfunction Status(props) {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4 className={props.wrongImage ? \"wrongImage\" : \"correctImage\"}>{props.message}</h4>\n        </div>\n    )\n}\n\nexport default Status;","import React from 'react';\n\nfunction Scoreboard(props) {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4>Score: {props.score} | Top Score: {props.topScore}</h4>\n        </div>\n    )\n}\n\nexport default Scoreboard;","import React from 'react';\nimport Home from './Home';\nimport Status from './Status';\nimport Scoreboard from './Scoreboard';\nimport './Header.css'\n\nconst Header = (props) => {\n    return (\n        <nav className=\"nav-menu navbar navbar-inverse navbar-fixed-top\" >\n            <Home />\n            <Status wrongImage={props.wrongImage} message={props.message} />\n            <Scoreboard score={props.score} topScore={props.topScore} />\n        </nav>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './Jumbotron.css';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n            <div className=\"container-fluid justify-items-center\">\n                <img className=\"main-logo\" src=\"https://whereispolaris.github.io/clicky-game/img/guessWhoLogo.png\" alt=\"guessWho\" />\n                <h4 className=\"instructions\">Click on an image to earn points, but don't click on any more than once!</h4>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        <div className=\"container-fluid text-center footer\">\n            <div className=\"text-center\">\n                <div className=\"card-footer\">\n                    React Clicky Game\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './CardBox.css'\n\nfunction CardBox(props) {\n    return (\n        <div className={props.wrongImage ? \"shake container-fluid text-center cardBox\" : \"container-fluid text-center cardBox\"} >\n            <div className=\"row\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBox;","import React from 'react';\nimport './Card.css';\nfunction Card(props) {\n    return (\n        <div className=\"card\" style={{ width: '11rem' }} >\n            <img className=\"image\" onClick={() => props.clickedCard(props.id)} src={props.image} alt={props.name} />\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Header from './Header';\nimport Jumbotron from './Jumbotron';\nimport Footer from './Footer';\nimport CardBox from './CardBox';\nimport Card from './Card';\nimport guessWho from \"../guessWho.json\";\n\n\nclass App extends React.Component {\n\n  state = {\n    guessWho,\n    score: 0,\n    topScore: 0,\n    message: \"Click and Image to Begin!\",\n    clickedCards: [],\n    wrongImage: false\n  }\n\n  handleClickedCard = (id) => {\n    // find out if id exists in clickedCards array\n    if (this.state.clickedCards.includes(id)) {\n      this.setState({\n        message: \"You guessed incorrectly!\",\n        wrongImage: true,\n        // reset state on all elements\n        score: 0,\n        clickedCards: []\n      });\n    } else {\n      this.setState({\n        wrongImage: false,\n        // Console Error: \"Do not mutate state directly. Use setState()  react/no-direct-mutation-state\"\n        score: this.state.score += 1,\n        message: \"You guessed correctly!\",\n        guessWho: this.state.guessWho.sort(() => Math.random() - 0.5)\n      });\n      // Push card id to clickedCards\n      this.setState({\n        clickedCards: [\n          ...this.state.clickedCards,\n          id\n        ]\n      })\n    }\n    // Top score checker\n    if (this.state.topScore < this.state.score) {\n      this.setState({\n        topScore: this.state.score\n      });\n    }\n    console.log(this.state.clickedCards);\n\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n          wrongImage={this.state.wrongImage}\n        />\n        <Jumbotron />\n        <CardBox wrongImage={this.state.wrongImage}>\n          {guessWho.map(character => {\n            return (\n              <Card\n                key={character.id}\n                image={character.image}\n                name={character.name}\n                id={character.id}\n                clicked={character.clicked}\n                clickedCard={this.handleClickedCard}\n              />\n            )\n          })}\n        </CardBox>\n        <Footer />\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}