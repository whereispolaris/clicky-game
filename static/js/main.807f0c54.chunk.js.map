{"version":3,"sources":["components/Home.js","components/Status.js","components/Scoreboard.js","components/Header.js","components/Jumbotron.js","components/Card.js","components/CardBox.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","className","Status","Scoreboard","Header","Jumbotron","Card","props","style","width","src","image","alt","name","CardBox","guessWho","map","character","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"63CAUeA,MARf,WACI,OACI,yBAAKC,UAAU,sBACX,6CCKGC,MARf,WACI,OACI,yBAAKD,UAAU,sBACX,0DCKGE,MARf,WACI,OACI,yBAAKF,UAAU,sBACX,yD,MCcGG,MAbf,WACI,OACI,yBAAKH,UAAU,wDAEX,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCDGI,MAXf,WACI,OACI,yBAAKJ,UAAU,6BACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,aAAd,gBACA,uBAAGA,UAAU,QAAb,+E,MCGDK,MARf,SAAcC,GACV,OACI,yBAAKN,UAAU,OAAOO,MAAO,CAAEC,MAAO,UAClC,yBAAKR,UAAU,cAAcS,IAAKH,EAAMI,MAAOC,IAAKL,EAAMM,S,OCiBvDC,MAlBf,WACI,OACI,yBAAKb,UAAU,mBACX,yBAAKA,UAAU,OACVc,EAASC,IAAI,SAAAC,GACV,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAUE,GACfR,MAAOM,EAAUN,MACjBE,KAAME,EAASF,YCK5BO,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.807f0c54.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4>Clicky Game</h4>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nfunction Status() {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4>Click an image to begin!</h4>\n        </div>\n    )\n}\n\nexport default Status;","import React from 'react';\n\nfunction Scoreboard() {\n    return (\n        <div className=\"col-sm text-center\">\n            <h4>Score: 0 | Top Score: 0</h4>\n        </div>\n    )\n}\n\nexport default Scoreboard;","import React from 'react';\nimport Home from './Home';\nimport Status from './Status';\nimport Scoreboard from './Scoreboard';\nimport './Header.css'\n\nfunction Header() {\n    return (\n        <div className=\"nav-menu row justify-content-center navbar-fixed-top\">\n            {/* // Home Component */}\n            <Home />\n            {/* // Status Component */}\n            <Status />\n            {/* // Score Component */}\n            <Scoreboard />\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container-fluid\">\n                <h1 className=\"display-4\">Clicky Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from 'react';\nimport './Card.css';\nfunction Card(props) {\n    return (\n        <div className=\"card\" style={{ width: '18rem' }} >\n            <img className=\"image-fluid\" src={props.image} alt={props.name} />\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport guessWho from \"../guessWho.json\";\n\nfunction CardBox() {\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                {guessWho.map(character => {\n                    return (\n                        <Card\n                            key={character.id}\n                            image={character.image}\n                            name={guessWho.name}\n                        />\n                    )\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBox;","import React from 'react';\nimport Header from './Header';\nimport Jumbotron from './Jumbotron';\nimport CardBox from './CardBox';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Jumbotron />\n      <CardBox />\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}